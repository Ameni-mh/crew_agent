"""initial commit

Revision ID: 3f656cdddd27
Revises: 
Create Date: 2025-08-13 10:38:27.440468

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3f656cdddd27'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_store_expires_at'), table_name='store', postgresql_where='(expires_at IS NOT NULL)')
    op.drop_index(op.f('store_prefix_idx'), table_name='store')
    op.drop_table('store')
    op.drop_table('store_migrations')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('store_migrations',
    sa.Column('v', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('v', name=op.f('store_migrations_pkey'))
    )
    op.create_table('store',
    sa.Column('prefix', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('ttl_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('prefix', 'key', name=op.f('store_pkey'))
    )
    op.create_index(op.f('store_prefix_idx'), 'store', ['prefix'], unique=False)
    op.create_index(op.f('idx_store_expires_at'), 'store', ['expires_at'], unique=False, postgresql_where='(expires_at IS NOT NULL)')
    # ### end Alembic commands ###
